/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as AsyncUseTransitionIndexImport } from './routes/async-use-transition/index'
import { Route as AsyncUseTransitionTabsIndexImport } from './routes/async-use-transition/tabs/index'
import { Route as AsyncUseTransitionAnalyticsIndexImport } from './routes/async-use-transition/analytics/index'
import { Route as AsyncUseTransitionTabsBeforeImport } from './routes/async-use-transition/tabs/before'
import { Route as AsyncUseTransitionTabsAfterImport } from './routes/async-use-transition/tabs/after'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AsyncUseTransitionIndexRoute = AsyncUseTransitionIndexImport.update({
  id: '/async-use-transition/',
  path: '/async-use-transition/',
  getParentRoute: () => rootRoute,
} as any)

const AsyncUseTransitionTabsIndexRoute =
  AsyncUseTransitionTabsIndexImport.update({
    id: '/async-use-transition/tabs/',
    path: '/async-use-transition/tabs/',
    getParentRoute: () => rootRoute,
  } as any)

const AsyncUseTransitionAnalyticsIndexRoute =
  AsyncUseTransitionAnalyticsIndexImport.update({
    id: '/async-use-transition/analytics/',
    path: '/async-use-transition/analytics/',
    getParentRoute: () => rootRoute,
  } as any)

const AsyncUseTransitionTabsBeforeRoute =
  AsyncUseTransitionTabsBeforeImport.update({
    id: '/async-use-transition/tabs/before',
    path: '/async-use-transition/tabs/before',
    getParentRoute: () => rootRoute,
  } as any)

const AsyncUseTransitionTabsAfterRoute =
  AsyncUseTransitionTabsAfterImport.update({
    id: '/async-use-transition/tabs/after',
    path: '/async-use-transition/tabs/after',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/async-use-transition/': {
      id: '/async-use-transition/'
      path: '/async-use-transition'
      fullPath: '/async-use-transition'
      preLoaderRoute: typeof AsyncUseTransitionIndexImport
      parentRoute: typeof rootRoute
    }
    '/async-use-transition/tabs/after': {
      id: '/async-use-transition/tabs/after'
      path: '/async-use-transition/tabs/after'
      fullPath: '/async-use-transition/tabs/after'
      preLoaderRoute: typeof AsyncUseTransitionTabsAfterImport
      parentRoute: typeof rootRoute
    }
    '/async-use-transition/tabs/before': {
      id: '/async-use-transition/tabs/before'
      path: '/async-use-transition/tabs/before'
      fullPath: '/async-use-transition/tabs/before'
      preLoaderRoute: typeof AsyncUseTransitionTabsBeforeImport
      parentRoute: typeof rootRoute
    }
    '/async-use-transition/analytics/': {
      id: '/async-use-transition/analytics/'
      path: '/async-use-transition/analytics'
      fullPath: '/async-use-transition/analytics'
      preLoaderRoute: typeof AsyncUseTransitionAnalyticsIndexImport
      parentRoute: typeof rootRoute
    }
    '/async-use-transition/tabs/': {
      id: '/async-use-transition/tabs/'
      path: '/async-use-transition/tabs'
      fullPath: '/async-use-transition/tabs'
      preLoaderRoute: typeof AsyncUseTransitionTabsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/async-use-transition': typeof AsyncUseTransitionIndexRoute
  '/async-use-transition/tabs/after': typeof AsyncUseTransitionTabsAfterRoute
  '/async-use-transition/tabs/before': typeof AsyncUseTransitionTabsBeforeRoute
  '/async-use-transition/analytics': typeof AsyncUseTransitionAnalyticsIndexRoute
  '/async-use-transition/tabs': typeof AsyncUseTransitionTabsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/async-use-transition': typeof AsyncUseTransitionIndexRoute
  '/async-use-transition/tabs/after': typeof AsyncUseTransitionTabsAfterRoute
  '/async-use-transition/tabs/before': typeof AsyncUseTransitionTabsBeforeRoute
  '/async-use-transition/analytics': typeof AsyncUseTransitionAnalyticsIndexRoute
  '/async-use-transition/tabs': typeof AsyncUseTransitionTabsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/async-use-transition/': typeof AsyncUseTransitionIndexRoute
  '/async-use-transition/tabs/after': typeof AsyncUseTransitionTabsAfterRoute
  '/async-use-transition/tabs/before': typeof AsyncUseTransitionTabsBeforeRoute
  '/async-use-transition/analytics/': typeof AsyncUseTransitionAnalyticsIndexRoute
  '/async-use-transition/tabs/': typeof AsyncUseTransitionTabsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/async-use-transition'
    | '/async-use-transition/tabs/after'
    | '/async-use-transition/tabs/before'
    | '/async-use-transition/analytics'
    | '/async-use-transition/tabs'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/async-use-transition'
    | '/async-use-transition/tabs/after'
    | '/async-use-transition/tabs/before'
    | '/async-use-transition/analytics'
    | '/async-use-transition/tabs'
  id:
    | '__root__'
    | '/'
    | '/async-use-transition/'
    | '/async-use-transition/tabs/after'
    | '/async-use-transition/tabs/before'
    | '/async-use-transition/analytics/'
    | '/async-use-transition/tabs/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AsyncUseTransitionIndexRoute: typeof AsyncUseTransitionIndexRoute
  AsyncUseTransitionTabsAfterRoute: typeof AsyncUseTransitionTabsAfterRoute
  AsyncUseTransitionTabsBeforeRoute: typeof AsyncUseTransitionTabsBeforeRoute
  AsyncUseTransitionAnalyticsIndexRoute: typeof AsyncUseTransitionAnalyticsIndexRoute
  AsyncUseTransitionTabsIndexRoute: typeof AsyncUseTransitionTabsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AsyncUseTransitionIndexRoute: AsyncUseTransitionIndexRoute,
  AsyncUseTransitionTabsAfterRoute: AsyncUseTransitionTabsAfterRoute,
  AsyncUseTransitionTabsBeforeRoute: AsyncUseTransitionTabsBeforeRoute,
  AsyncUseTransitionAnalyticsIndexRoute: AsyncUseTransitionAnalyticsIndexRoute,
  AsyncUseTransitionTabsIndexRoute: AsyncUseTransitionTabsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/async-use-transition/",
        "/async-use-transition/tabs/after",
        "/async-use-transition/tabs/before",
        "/async-use-transition/analytics/",
        "/async-use-transition/tabs/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/async-use-transition/": {
      "filePath": "async-use-transition/index.tsx"
    },
    "/async-use-transition/tabs/after": {
      "filePath": "async-use-transition/tabs/after.tsx"
    },
    "/async-use-transition/tabs/before": {
      "filePath": "async-use-transition/tabs/before.tsx"
    },
    "/async-use-transition/analytics/": {
      "filePath": "async-use-transition/analytics/index.tsx"
    },
    "/async-use-transition/tabs/": {
      "filePath": "async-use-transition/tabs/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
